# -*- coding: utf-8 -*-
"""mailPriceAlert.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PcLZGbsp6Jd30bUYBExVARSMb38mJUYU
"""

from bs4 import BeautifulSoup
import requests
import time
import smtplib
import ssl
import json
from email.mime.text import MIMEText as MT
from email.mime.multipart import MIMEMultipart as MM
import websockets
import asyncio

def get_cyrpto_price(coin):
  
  r = requests.get('https://coinmarketcap.com/currencies/bitcoin/')
  soup = BeautifulSoup(r.text, 'lxml')
  

  price = soup.find('a',href='/currencies/bitcoin/markets/', class_='cmc-link').text

  #price = soup.find('div',class_='sc-16r8icm-0 kjciSH priceTitle').text

  price = price.replace(","," ")
  price = price.replace("$","")
  
  

  return price



receiver = 'kriptomesaj@gmail.com'
sender = 'kriptomesaj@gmail.com'
sender_password = 'kriptomesaj35'

def send_email(sender, receiver, sender_password, text_price):
  msg = MM()
  msg['Subject'] = "New Cyrpto Price Alert !"
  msg['From'] = sender
  msg['To'] = receiver

  HTML = """
    <html>
      <body>
        <h1>New Cyrpto Price Alert !</h1>
        <h2>"""+text_price+"""</h2>
      </body>
    </html>
    """
  MTObj = MT(HTML, "html")
  msg.attach(MTObj)
  
  SSL_context = ssl.create_default_context()

  server = smtplib.SMTP_SSL(host="smtp.gmail.com", port=465, context=SSL_context)
  server.login(sender, sender_password)
  server.sendmail(sender, receiver, msg.as_string())



async def coin_price_1():
    url = "wss://stream.binance.com:9443/ws/btcusdt@miniTicker"

    async with websockets.connect(url) as ws:
            msg = await ws.recv()
            return msg

async def coin_price_loop():
    url = "wss://stream.binance.com:9443/ws/btcusdt@miniTicker"

    async with websockets.connect(url) as ws:
        while True:
            msg = await ws.recv()
            return msg



def send_alert():
  alarm_price = float(input("Price:"))

  while True:
    coin = 'bitcoin'
    
    data = asyncio.get_event_loop().run_until_complete(coin_price_1())
    price = json.loads(data)
    price = price["c"]
    price = float(price)
    
    while price <= alarm_price:
      data = asyncio.get_event_loop().run_until_complete(coin_price_loop())
      price = json.loads(data)
      price = price["c"]
      price = float(price)
      
      if price >= alarm_price:
        print(coin.capitalize()+' price: ', price)
        price_text = coin.capitalize()+' is '+str(price)
        send_email(sender, receiver, sender_password, price_text)        
        break
    
    while price >= alarm_price:
      data = asyncio.get_event_loop().run_until_complete(coin_price_loop())
      price = json.loads(data)
      price = price["c"]
      price = float(price)
      

      if price <= alarm_price:
        print(coin.capitalize()+' price: ', price)
        price_text = coin.capitalize()+' is '+str(price)
        send_email(sender, receiver, sender_password, price_text)
        break
    
    break

send_alert()
# https://accounts.google.com/DisplayUnlockCaptcha hata verdiğinde captcha onayı için buraya gir